{"version":3,"sources":["Components/Weather/Widget/WidgetCSS.ts","API/weatherAPI.ts","Redux/weatherReducer.ts","Redux/fullInfoReducer.ts","Components/Weather/Widget/Widget.tsx","Components/Weather/WeatherCSS.ts","Components/Weather/Weather.tsx","Components/Header/HeaderCSS.ts","Components/Header/Header.tsx","Redux/appReducer.ts","Components/Weather/FullInfo/FullInfoCSS.ts","Components/Weather/FullInfo/Chart.tsx","Components/Weather/FullInfo/FullInfo.tsx","App.tsx","reportWebVitals.ts","Redux/store.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","cursor","width","margin","border","borderRadius","backgroundColor","fontWeight","main_card","card_content","img_block","display","info_block","buttons_block","flexDirection","justifyContent","weatherApi","city","axios","get","then","res","data","catch","e","message","lat","lon","hourly","initState","cities","isLoad","error","addCity","type","setCity","refreshCityInfo","setError","refreshInfo","dispatch","a","addCityToLS","getState","s","weatherPage","localStorage","setItem","JSON","stringify","dailyWeather","id","main","feels_like","humidity","pressure","temp","temp_max","temp_min","name","dt","sys","country","sunrise","sunset","weather","description","wind","speed","coord","getDailyWeatherInfo","Widget","props","console","log","unix","Date","classes","useDispatch","history","useHistory","HandleOnClick","useCallback","push","page","Container","className","onClick","style","height","src","alt","textAlign","padding","color","toLocaleTimeString","toLocaleDateString","IconButton","deleteWidget","fontSize","refreshWidget","Weather","useSelector","state","deleteCity","getItem","parsedCities","arrCities","parse","filtered","filter","el","deleteCityFromLS","cityTitle","position","top","CircularProgress","Grid","container","map","c","flexGrow","menuButton","marginRight","spacing","title","inputRoot","inputInput","paddingLeft","transition","transitions","create","breakpoints","up","Header","formik","useFormik","initialValues","onSubmit","values","resetForm","toUpperCase","AppBar","Toolbar","handleSubmit","InputBase","placeholder","input","inputProps","onChange","handleChange","value","Typography","variant","initialize","header","info_content__block","weather_info__block","listStyleType","temperatureBlock","button","chart","minWidth","ChartContainer","dayData","fullPage","dataArr","slice","chartType","loader","splice","options","hAxis","vAxis","rootProps","FullInfo","HandleClose","Card","to","App","app","useEffect","setTimeout","exact","path","render","from","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","window","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.c07f7750.chunk.js","sourcesContent":["import {createStyles, makeStyles, Theme} from \"@material-ui/core\"\r\n\r\nexport const useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            \"& > div:hover\": {\r\n                cursor: \"pointer\",\r\n            },\r\n            width: \"200px\",\r\n            margin: \"10px\",\r\n            border: \"2px solid hsl(199, 21%, 91%)\",\r\n            borderRadius: \"10%\",\r\n            backgroundColor: \"hsl(167, 100%, 92%)\",\r\n           fontWeight:\"bold\"\r\n        },\r\n        main_card: {\r\n\r\n        },\r\n        card_content: {\r\n            margin: \"5px\"\r\n        },\r\n        img_block: {\r\n            display: \"flex\",\r\n        },\r\n        info_block: {\r\n            margin: \"10px\"\r\n        },\r\n        buttons_block: {\r\n            \"&>button\": {\r\n                margin: \"5px 0\"\r\n            },\r\n            display: \"flex\",\r\n            flexDirection: \"row-reverse\",\r\n            justifyContent: \"space-between\",\r\n            margin: \"0 0 0 0\",\r\n        }\r\n    }),\r\n)","import axios from \"axios\"\r\nimport {CityType} from \"../Redux/weatherReducer\"\r\n\r\nexport type DayTempType = {\r\n    temp: number\r\n    dt: number\r\n    clouds: number\r\n    dew_point: number\r\n    feels_like: number\r\n    humidity: number\r\n    pop: number\r\n    pressure: number\r\n\r\n    uvi: number\r\n    visibility: number\r\n    weather: {\r\n        description: string\r\n        icon: string\r\n        id: number\r\n        main: string\r\n    }[]\r\n    wind_deg: number\r\n    wind_gust: number\r\n    wind_speed: number\r\n}\r\nexport type ResponseDayTempDataType = {\r\n    current: {\r\n        clouds: number\r\n        dew_point: number\r\n        dt: number\r\n        feels_like: number\r\n        humidity: number\r\n        pressure: number\r\n        sunrise: number\r\n        sunset: number\r\n        temp: number\r\n        uvi: number\r\n        visibility: number\r\n    }\r\n    hourly: DayTempType[]\r\n    lat: number\r\n    lon: number\r\n    minutely: {\r\n        dt: number\r\n        precipitation: number\r\n    }[]\r\n    timezone: string\r\n    timezone_offset: number\r\n\r\n}\r\n\r\nexport const weatherApi = {\r\n    getWeatherInfo(city: string) {\r\n        return axios.get<CityType | any>(`https://api.openweathermap.org/data/2.5/weather?q=${city}&lang=en&appid=671ec129d126e4a3a9fa78e514fcc519&units=metric`)\r\n            .then(res => res.data)\r\n            .catch(e => {\r\n                return e.message = \"Something wrong\"\r\n            })\r\n    },\r\n    getDailyWeatherInfo(lat: number, lon: number) {\r\n        return axios.get<ResponseDayTempDataType | any>(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=daily&appid=671ec129d126e4a3a9fa78e514fcc519&units=metric`)\r\n            .then(res => res.data.hourly)\r\n            .catch(e => {\r\n                return e.message = \"Something wrong\"\r\n            })\r\n\r\n    }\r\n}\r\n\r\n\r\n","import {ThunkType} from \"./store\"\r\nimport {weatherApi} from \"../API/weatherAPI\"\r\n\r\nexport type CityType = {\r\n    id: number\r\n    main: {\r\n        feels_like: number\r\n        humidity: number\r\n        pressure: number\r\n        temp: number\r\n        temp_max: number\r\n        temp_min: number\r\n    }\r\n    name: string\r\n    dt: number\r\n    sys: {\r\n        country: string\r\n        id: number\r\n        sunrise: number\r\n        sunset: number\r\n    }\r\n    weather: {\r\n        id: string\r\n        description: string\r\n    }[]\r\n    wind: {\r\n        speed: number\r\n    }\r\n    coord: {\r\n        lat: number\r\n        lon: number\r\n    }\r\n\r\n}\r\ntype WeatherStateType = {\r\n    cities: CityType[]\r\n    isLoad: boolean\r\n    error: string\r\n}\r\n\r\nexport type AddCityType = ReturnType<typeof addCity>\r\nexport type IsLoadingType = ReturnType<typeof isLoading>\r\nexport type SetCityType = ReturnType<typeof setCity>\r\nexport type DeleteCityType = ReturnType<typeof deleteCity>\r\nexport type SetErrorType = ReturnType<typeof setError>\r\nexport type RefreshCityInfoType = ReturnType<typeof refreshCityInfo>\r\nexport type ActionsType = AddCityType\r\n    | SetCityType\r\n    | DeleteCityType\r\n    | RefreshCityInfoType\r\n    | IsLoadingType\r\n    | SetErrorType\r\n\r\n\r\nlet initState: WeatherStateType = {\r\n    cities: [],\r\n    isLoad: false,\r\n    error: \"\"\r\n}\r\n\r\nexport const weatherReducer = (state = initState, action: ActionsType): WeatherStateType => {\r\n    switch (action.type) {\r\n        case \"SET_CITY_WEATHER\": {\r\n            return {\r\n                ...state,\r\n                cities: [...action.cities]\r\n\r\n            }\r\n        }\r\n        case \"IS_LOADING_WEATHER\": {\r\n            return {\r\n                ...state,\r\n                isLoad: !state.isLoad\r\n            }\r\n        }\r\n        case \"ADD_CITY_WEATHER\": {\r\n            return {\r\n                ...state,\r\n                cities: [...state.cities.filter(c => c.id !== action.city.id), action.city]\r\n            }\r\n        }\r\n        case \"DELETE_CITY_WEATHER\": {\r\n            return {\r\n                ...state,\r\n                cities: state.cities.filter(c => c.id !== action.id)\r\n            }\r\n        }\r\n        case \"REFRESH_CITY_INFO_WEATHER\": {\r\n            return {\r\n                ...state,\r\n                cities: state.cities.map(c => {\r\n                    if (c.id === action.city.id) {\r\n                        c = action.city\r\n                    }\r\n                    return c\r\n                })\r\n            }\r\n        }\r\n        case \"SET_ERROR_WEATHER\": {\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport const addCity = (city: CityType) => {\r\n    return {\r\n        type: \"ADD_CITY_WEATHER\",\r\n        city\r\n    } as const\r\n}\r\n//make audit for load data in request\r\nexport const isLoading = () => {\r\n    return {\r\n        type: \"IS_LOADING_WEATHER\",\r\n    } as const\r\n}\r\n\r\nexport const setCity = (cities: CityType[]) => {\r\n    return {\r\n        type: \"SET_CITY_WEATHER\",\r\n        cities\r\n    } as const\r\n}\r\n\r\nexport const deleteCity = (id: number) => {\r\n    return {\r\n        type: \"DELETE_CITY_WEATHER\",\r\n        id\r\n    } as const\r\n}\r\n\r\nexport const refreshCityInfo = (city: CityType) => {\r\n    return {\r\n        type: \"REFRESH_CITY_INFO_WEATHER\",\r\n        city\r\n    } as const\r\n}\r\n\r\nexport const setError = (error: string) => {\r\n    return {\r\n        type: \"SET_ERROR_WEATHER\",\r\n        error\r\n    } as const\r\n}\r\n\r\n//request weather data from input field\r\nexport const getInfo = (city: string): ThunkType =>\r\n    async (dispatch) => {\r\n        dispatch(isLoading())\r\n        const res = await weatherApi.getWeatherInfo(city)\r\n        if (res === \"Something wrong\") {\r\n            dispatch(isLoading())\r\n            dispatch(setError(\"Can't find city, please enter valid data\"))\r\n        } else {\r\n            dispatch(addCity(res))\r\n            await dispatch(addCityToLS())\r\n            dispatch(isLoading())\r\n        }\r\n    }\r\n\r\nexport const refreshInfo = (city: string): ThunkType =>\r\n    async (dispatch) => {\r\n        dispatch(isLoading())\r\n        const res = await weatherApi.getWeatherInfo(city)\r\n        dispatch(refreshCityInfo(res))\r\n        dispatch(isLoading())\r\n    }\r\n\r\nexport const addCityToLS = (): ThunkType =>\r\n    async (dispatch, getState) => {\r\n        let s = getState().weatherPage.cities\r\n        localStorage.setItem(\"cities\", JSON.stringify([...s]))\r\n    }\r\n\r\nexport const deleteCityFromLS = (id: number): ThunkType =>\r\n    async () => {\r\n        const cities = localStorage.getItem(\"cities\")\r\n        const parsedCities = []\r\n        if (cities) {\r\n            const arrCities: CityType[] = JSON.parse(cities)\r\n            parsedCities.push(...arrCities)\r\n        }\r\n        let filtered = parsedCities.filter(el => el.id !== id)\r\n        localStorage.setItem(\"cities\", JSON.stringify([...filtered]))\r\n    }\r\n\r\n    //set cities in init state\r\nexport const setInfo = (): ThunkType =>\r\n    async (dispatch) => {\r\n        const cities = localStorage.getItem(\"cities\")\r\n        if (cities) {\r\n            const arrCities: CityType[] = JSON.parse(cities)\r\n            dispatch(setCity(arrCities))\r\n        }\r\n    }\r\n\r\n","import {ThunkType} from \"./store\"\r\nimport {CityType, isLoading} from \"./weatherReducer\"\r\nimport {DayTempType, weatherApi} from \"../API/weatherAPI\"\r\n\r\ntype FullInfoReducerStateType = {\r\n    dailyWeather: DayTempType[]\r\n    city: CityType\r\n}\r\nexport type SetRenderedPageType = ReturnType<typeof setRenderedPage>\r\nexport type SetFullCityInfoType = ReturnType<typeof setFullCityInfo>\r\nexport type SetDailyWeatherInfoType = ReturnType<typeof setDailyWeatherInfo>\r\nexport type FullInfoReducerActionsType = SetRenderedPageType\r\n    | SetFullCityInfoType\r\n    | SetDailyWeatherInfoType\r\n\r\nconst initState: FullInfoReducerStateType = {\r\n    dailyWeather: [],\r\n    city: {\r\n        id: 0,\r\n        main: {\r\n            feels_like: 0,\r\n            humidity: 0,\r\n            pressure: 0,\r\n            temp: 0,\r\n            temp_max: 0,\r\n            temp_min: 0,\r\n        },\r\n        name: \"\",\r\n        dt: 0,\r\n        sys: {\r\n            country: \"\",\r\n            id: 0,\r\n            sunrise: 0,\r\n            sunset: 0,\r\n        },\r\n        weather: [{\r\n            id: \"\",\r\n            description: \"\",\r\n        }],\r\n        wind: {\r\n            speed: 0\r\n        },\r\n        coord: {\r\n            lat: 0,\r\n            lon: 0\r\n        }\r\n    },\r\n}\r\n\r\nexport const fullInfoReducer = (state = initState, action: FullInfoReducerActionsType): FullInfoReducerStateType => {\r\n    switch (action.type) {\r\n        case \"SET_FULL_CITY_INFO___FULL_INFO_PAGE\": {\r\n            return {\r\n                ...state,\r\n                city: {...action.data}\r\n            }\r\n        }\r\n        case \"SET_DAILY_WEATHER_INFO___FULL_INFO_PAGE\": {\r\n            return {\r\n                ...state,\r\n                dailyWeather: [...action.data]\r\n            }\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport const setRenderedPage = (page: string) => {\r\n    return {\r\n        type: \"SET_RENDERER_PAGE___FULL_INFO_PAGE\",\r\n        page\r\n    } as const\r\n}\r\n\r\nexport const setFullCityInfo = (data: CityType) => {\r\n    return {\r\n        type: \"SET_FULL_CITY_INFO___FULL_INFO_PAGE\",\r\n        data\r\n    } as const\r\n}\r\nexport const setDailyWeatherInfo = (data: DayTempType[]) => {\r\n    return {\r\n        type: \"SET_DAILY_WEATHER_INFO___FULL_INFO_PAGE\",\r\n        data\r\n    } as const\r\n}\r\n\r\nexport const getCheckedCityInfo = (city: string): ThunkType =>\r\n    async (dispatch) => {\r\n        dispatch(setRenderedPage(city))\r\n        dispatch(isLoading())\r\n        const res = await weatherApi.getWeatherInfo(city)\r\n        dispatch(setFullCityInfo(res))\r\n        await dispatch(getDailyWeatherInfo(res.coord.lat, res.coord.lon))\r\n        dispatch(isLoading())\r\n    }\r\n\r\nexport const getDailyWeatherInfo = (lat: number, lon: number): ThunkType =>\r\n    async (dispatch) => {\r\n        dispatch(isLoading())\r\n        const res = await weatherApi.getDailyWeatherInfo(lat, lon)\r\n\r\n        dispatch(setDailyWeatherInfo(res))\r\n        dispatch(isLoading())\r\n    }\r\n\r\n","import React, {useCallback} from \"react\"\r\nimport {Container, IconButton} from \"@material-ui/core\"\r\nimport {useStyles} from \"./WidgetCSS\"\r\nimport {CityType} from \"../../../Redux/weatherReducer\"\r\nimport {getCheckedCityInfo} from \"../../../Redux/fullInfoReducer\"\r\nimport {useHistory} from \"react-router-dom\"\r\nimport {useDispatch} from \"react-redux\"\r\nimport DeleteIcon from \"@material-ui/icons/Delete\"\r\nimport RefreshIcon from \"@material-ui/icons/Refresh\"\r\nimport DateRangeIcon from \"@material-ui/icons/DateRange\"\r\nimport ThermostatIcon from \"@mui/icons-material/Thermostat\"\r\nimport AccessTimeIcon from \"@mui/icons-material/AccessTime\"\r\n\r\ntype WidgetPropsType = {\r\n    deleteWidget: (id: number) => void\r\n    refreshWidget: (cityTitle: string) => void\r\n}\r\n\r\nexport const Widget: React.FC<CityType & WidgetPropsType> = (props) => {\r\n    console.log(\"widget rendered\")\r\n    let unix = new Date(props.dt * 1000)\r\n\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    const HandleOnClick = useCallback(() => {\r\n        history.push(`/fullInfo`)\r\n        dispatch(getCheckedCityInfo(props.name))\r\n    }, [history])\r\n\r\n    return (\r\n        <Container className={classes.root}>\r\n            <div className={classes.main_card} onClick={HandleOnClick}>\r\n                <div className={classes.card_content}>\r\n                    <div className={classes.img_block}>\r\n                        <img style={{height: \"50px\", borderRadius: \"50%\"}}\r\n                             src={`https://www.countryflags.io/${props.sys.country}/flat/64.png`}\r\n                             alt={props.name}/>\r\n                        <div style={{textAlign: \"center\", padding: \"0 0 0 10px\"}}>{props.name}</div>\r\n                    </div>\r\n                    <div className={classes.info_block}>\r\n                        <div>\r\n                            <AccessTimeIcon style={{color: \"hsl(215, 35%, 74%)\", margin: \"3px 0 0 0\"}}/>\r\n                            {unix.toLocaleTimeString()}\r\n                        </div>\r\n                        <div>\r\n                            <ThermostatIcon style={{color: \"hsl(215, 35%, 74%)\"}}/>\r\n                            <span>{props.main.temp}</span>\r\n                        </div>\r\n                        <div>\r\n                            <DateRangeIcon style={{color: \"hsl(215, 35%, 74%)\"}}/>\r\n                            <span>{unix.toLocaleDateString()}</span>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={classes.buttons_block}>\r\n                <IconButton style={{color: \"red\"}} onClick={() => props.deleteWidget(props.id)}>\r\n                    <DeleteIcon fontSize={\"small\"}/>\r\n                </IconButton>\r\n                <IconButton style={{color: \"blue\"}} onClick={() => props.refreshWidget(props.name)}>\r\n                    <RefreshIcon fontSize={\"small\"}/>\r\n                </IconButton>\r\n            </div>\r\n        </Container>\r\n    )\r\n}","import {createStyles, makeStyles, Theme} from \"@material-ui/core\"\r\n\r\nexport const useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            justifyContent: \"flex-start\",\r\n        },\r\n    }),\r\n)","import React from \"react\"\r\nimport {Widget} from \"./Widget/Widget\"\r\nimport {Grid} from \"@material-ui/core\"\r\nimport {CircularProgress} from \"@material-ui/core\"\r\nimport {useStyles} from \"./WeatherCSS\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {AppStateType} from \"../../Redux/store\"\r\nimport {CityType} from \"../../Redux/weatherReducer\"\r\nimport {deleteCity} from \"../../Redux/weatherReducer\"\r\nimport {deleteCityFromLS} from \"../../Redux/weatherReducer\"\r\nimport {refreshInfo} from \"../../Redux/weatherReducer\"\r\n\r\n\r\nexport const Weather: React.FC = () => {\r\n    const cities = useSelector<AppStateType, CityType[]>(state => state.weatherPage.cities)\r\n    const isLoad = useSelector<AppStateType, boolean>(state => state.weatherPage.isLoad)\r\n    const error = useSelector<AppStateType, string>(state => state.weatherPage.error)\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const deleteWidget = (id: number) => {\r\n        dispatch(deleteCity(id))\r\n        dispatch(deleteCityFromLS(id))\r\n    }\r\n\r\n    const refreshWidget = (cityTitle: string) => {\r\n        dispatch(refreshInfo(cityTitle))\r\n    }\r\n\r\n\r\n    if (isLoad) {\r\n        return <div\r\n            style={{position: \"fixed\", top: \"30%\", textAlign: \"center\", width: \"100%\"}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        !error\r\n            ? <Grid container className={classes.root}>\r\n                {cities.map(c => <Widget key={c.id}\r\n                                         {...c}\r\n                                         deleteWidget={deleteWidget}\r\n                                         refreshWidget={refreshWidget}\r\n                />)}\r\n            </Grid>\r\n            : <div style={{textAlign: \"center\", color: \"red\"}}><h1>{error}</h1></div>\r\n    )\r\n}","import {createStyles, makeStyles, Theme} from \"@material-ui/core\"\r\n\r\nexport const useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n        title: {\r\n            flexGrow: 1,\r\n            textAlign: \"center\"\r\n        },\r\n        inputRoot: {\r\n            color: \"white\",\r\n            backgroundColor:\"black\"\r\n        },\r\n        inputInput: {\r\n            padding: theme.spacing(1, 1, 1, 0),\r\n            // vertical padding + font size from searchIcon\r\n            paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n            transition: theme.transitions.create(\"width\"),\r\n            width: \"100%\",\r\n            [theme.breakpoints.up(\"md\")]: {\r\n                width: \"20ch\",\r\n            },\r\n        },\r\n    }),\r\n)","import React from \"react\"\r\nimport {AppBar, InputBase} from \"@material-ui/core\"\r\nimport {Toolbar} from \"@material-ui/core\"\r\nimport {Typography} from \"@material-ui/core\"\r\nimport {useStyles} from \"./HeaderCSS\"\r\nimport {useFormik} from \"formik\"\r\nimport {useDispatch} from \"react-redux\"\r\nimport {getInfo, setError} from \"../../Redux/weatherReducer\"\r\n\r\nexport const Header: React.FC = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            cityTitle: \"\",\r\n        },\r\n        onSubmit: (values, {resetForm}) => {\r\n            dispatch(getInfo(values.cityTitle.toUpperCase()))\r\n            dispatch(setError(\"\"))\r\n            resetForm()\r\n        },\r\n    })\r\n\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <AppBar position=\"sticky\" style={{backgroundColor:\"hsl(269, 85%, 95%)\",color:\"black\"}}>\r\n            <Toolbar>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <InputBase\r\n                        style={{backgroundColor:\"hsl(269, 85%, 95%)\", color:\"black\"}}\r\n                        placeholder=\"Search your city…\"\r\n                        classes={{\r\n                            root: classes.inputRoot,\r\n                            input: classes.inputInput,\r\n                        }}\r\n                        inputProps={{\"aria-label\": \"search\"}}\r\n                        id=\"cityTitle\"\r\n                        name=\"cityTitle\"\r\n                        type=\"text\"\r\n                        onChange={formik.handleChange}\r\n                        value={formik.values.cityTitle}\r\n                    />\r\n                </form>\r\n                <Typography variant=\"h6\" className={classes.title}>\r\n                    Weather Client\r\n                </Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}","import {ThunkType} from \"./store\"\r\n\r\ntype appReducerStateType = {\r\n    initialize: boolean\r\n}\r\nexport type SetInitializeType = ReturnType<typeof setInitialize>\r\nexport type AppReducerActionsType = SetInitializeType\r\n\r\nconst initState: appReducerStateType = {\r\n    initialize: false\r\n}\r\n\r\nexport const appReducer = (state = initState, action: AppReducerActionsType): appReducerStateType => {\r\n    switch (action.type) {\r\n        case \"INITIALIZE_APP\": {\r\n            return {\r\n                ...state,\r\n                initialize: true\r\n            }\r\n\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport const setInitialize = () => {\r\n    return {\r\n        type: \"INITIALIZE_APP\"\r\n    } as const\r\n}\r\n\r\n\r\n//make fake initialization\r\nexport const initApp = (): ThunkType =>\r\n    async (dispatch) => {\r\n        setTimeout(() => {\r\n            dispatch(setInitialize())\r\n        }, 3000)\r\n    }","import {createStyles, makeStyles, Theme} from \"@material-ui/core\"\r\n\r\nexport const useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n\r\n        },\r\n        card_content: {\r\n            \"& > div\": {\r\n                margin: \"5px 10px\"\r\n            },\r\n            margin: \"10px 0\"\r\n        },\r\n        header: {},\r\n        img_block: {},\r\n        info_block: {\r\n\r\n            fontWeight: \"bold\"\r\n        },\r\n        info_content__block: {\r\n\r\n        },\r\n        weather_info__block: {\r\n            \"& > ul\": {\r\n                listStyleType: \"none\",\r\n            },\r\n            \"& > ul > li > svg\": {\r\n                color: \"hsl(307, 31%, 86%)\"\r\n            },\r\n            color: \"hsl(205, 5%, 39%)\"\r\n        },\r\n        temperatureBlock: {},\r\n        button: {},\r\n        chart: {\r\n            minWidth: \"1000px\",\r\n        }\r\n    }),\r\n)\r\n\r\n","import React from \"react\"\r\nimport {Chart} from \"react-google-charts\"\r\nimport {useSelector} from \"react-redux\"\r\nimport {AppStateType} from \"../../../Redux/store\"\r\nimport {DayTempType} from \"../../../API/weatherAPI\"\r\nimport {useStyles} from \"./FullInfoCSS\"\r\n\r\n\r\nexport const ChartContainer: React.FC = () => {\r\n    const dayData = useSelector<AppStateType, DayTempType[]>(state => state.fullPage.dailyWeather)\r\n    const classes = useStyles()\r\n    let dataArr = dayData.map(el=>{\r\n        return [new Date(el.dt * 1000).toLocaleTimeString().slice(0,-6), el.temp]\r\n    })\r\n\r\n    return (\r\n        <div className={classes.chart}>\r\n            <Chart\r\n                height={\"500px\"}\r\n                chartType=\"LineChart\"\r\n                loader={<div>Loading Chart</div>}\r\n                data={[\r\n                    [\"h\", \"temp\"],\r\n                    ...dataArr.splice(23)//delete 24 of 48 elem for correct write data in the chart\r\n                ]}\r\n                options={{\r\n                    hAxis: {\r\n                        title: \"Time\",\r\n                    },\r\n                    vAxis: {\r\n                        title: \"Temperature\",\r\n                    },\r\n                }}\r\n                rootProps={{\"data-testid\": \"1\"}}\r\n            />\r\n        </div>\r\n    )\r\n}","import React from \"react\"\r\nimport {useCallback} from \"react\"\r\nimport {IconButton} from \"@material-ui/core\"\r\nimport {Container} from \"@material-ui/core\"\r\nimport {Card} from \"@material-ui/core\"\r\nimport {useHistory} from \"react-router-dom\"\r\nimport {NavLink} from \"react-router-dom\"\r\nimport {useSelector} from \"react-redux\"\r\nimport {useDispatch} from \"react-redux\"\r\nimport {AppStateType} from \"../../../Redux/store\"\r\nimport {refreshInfo} from \"../../../Redux/weatherReducer\"\r\nimport {CityType} from \"../../../Redux/weatherReducer\"\r\nimport {useStyles} from \"./FullInfoCSS\"\r\nimport {ChartContainer} from \"./Chart\"\r\nimport CloseIcon from \"@material-ui/icons/Close\"\r\nimport RefreshIcon from \"@material-ui/icons/Refresh\"\r\nimport AccessTimeIcon from \"@mui/icons-material/AccessTime\"\r\nimport DateRangeIcon from \"@material-ui/icons/DateRange\"\r\nimport Brightness1Icon from \"@mui/icons-material/Brightness1\"\r\nimport Brightness2Icon from \"@mui/icons-material/Brightness2\"\r\nimport ThermostatIcon from \"@mui/icons-material/Thermostat\"\r\nimport CompressIcon from \"@mui/icons-material/Compress\"\r\nimport OpacityIcon from \"@mui/icons-material/Opacity\"\r\nimport CloudIcon from \"@mui/icons-material/Cloud\"\r\nimport DoubleArrowIcon from \"@mui/icons-material/DoubleArrow\"\r\n\r\n\r\nexport const FullInfo = () => {\r\n    const city = useSelector<AppStateType, CityType>(state => state.fullPage.city)\r\n    let unix = new Date(city.dt * 1000)\r\n    let sunrise = new Date(city.sys.sunrise * 1000).toLocaleTimeString()\r\n    let sunset = new Date(city.sys.sunset * 1000).toLocaleTimeString()\r\n    const classes = useStyles()\r\n\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    const refreshCityWeather = () => {\r\n        dispatch(refreshInfo(city.name))\r\n    }\r\n\r\n    const HandleClose = useCallback(() => {\r\n        history.push(`/`)\r\n    }, [history])\r\n\r\n    return (\r\n        <Container className={classes.root}>\r\n            <Card className={classes.card_content}>\r\n                {!city.name\r\n                    ? <>\r\n                        <h3 className={classes.header}>please check widget</h3>\r\n                        <NavLink to={\"/\"}>go back</NavLink>\r\n                    </>\r\n\r\n                    : <>\r\n                        <div style={{display: \"flex\"}}>\r\n                            <div className={classes.info_block}>\r\n                                <div className={classes.info_content__block}>\r\n                                    <div>\r\n                                        <IconButton style={{color: \"blue\"}} onClick={refreshCityWeather}>\r\n                                            <RefreshIcon fontSize={\"small\"}/>\r\n                                        </IconButton>\r\n                                        <h3>{city.name}</h3>\r\n\r\n                                        <img\r\n                                            src={`https://www.countryflags.io/${city.sys.country}/flat/64.png`}\r\n                                            alt={city.name}\r\n                                        />\r\n\r\n                                    </div>\r\n                                    <div className={classes.weather_info__block}>\r\n                                        <ul>\r\n                                            <li><AccessTimeIcon/> time\r\n                                                <div>\r\n                                                    {unix.toLocaleTimeString()}\r\n                                                </div>\r\n                                            </li>\r\n                                            <li><DateRangeIcon/> date\r\n                                                <div>\r\n                                                    {unix.toLocaleDateString()}\r\n                                                </div>\r\n                                            </li>\r\n                                            <li>\r\n                                                <Brightness1Icon/> sunrise\r\n                                                <div>{sunrise}</div>\r\n                                            </li>\r\n                                            <li>\r\n                                                <Brightness2Icon/> sunset\r\n                                                <div>{sunset}</div>\r\n                                            </li>\r\n                                        </ul>\r\n                                        <ul className={classes.temperatureBlock}>\r\n                                            <li>\r\n                                                <ThermostatIcon/> temp\r\n                                                <div>{city.main.temp}</div>\r\n                                            </li>\r\n                                            <li>\r\n                                                <ThermostatIcon/>like a\r\n                                                <div>{city.main.feels_like}</div>\r\n                                            </li>\r\n                                            <li>\r\n                                                <OpacityIcon/> humid\r\n                                                <div>{city.main.humidity}</div>\r\n                                            </li>\r\n                                            <li>\r\n                                                <CompressIcon/> press\r\n                                                <div>{city.main.pressure}</div>\r\n                                            </li>\r\n                                            <li>\r\n                                                <ThermostatIcon/>\r\n                                                max <div>{city.main.temp_max}</div>\r\n                                            </li>\r\n                                            <li>\r\n                                                <ThermostatIcon/>\r\n                                                min <div>{city.main.temp_min}</div>\r\n                                            </li>\r\n                                        </ul>\r\n                                        <div>\r\n                                            <CloudIcon/>weather\r\n                                            <div>{city.weather[0].description}</div>\r\n                                        </div>\r\n                                        <div>\r\n                                            <DoubleArrowIcon/>wind\r\n                                           <div>{city.wind.speed} m</div>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div>\r\n                            <div className={classes.button}>\r\n                                <IconButton style={{color: \"red\"}} onClick={HandleClose}>\r\n                                    <CloseIcon fontSize={\"small\"}/>\r\n                                </IconButton>\r\n                            </div>\r\n                            <div >\r\n                                <ChartContainer/>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n\r\n                        </div>\r\n                    </>\r\n                }\r\n            </Card>\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\n","import React from \"react\"\r\nimport {useEffect} from \"react\"\r\nimport \"./App.css\"\r\nimport {Weather} from \"./Components/Weather/Weather\"\r\nimport {Header} from \"./Components/Header/Header\"\r\nimport {Container} from \"@material-ui/core\"\r\nimport {CircularProgress} from \"@material-ui/core\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {AppStateType} from \"./Redux/store\"\r\nimport {setInfo} from \"./Redux/weatherReducer\"\r\nimport {initApp} from \"./Redux/appReducer\"\r\nimport {FullInfo} from \"./Components/Weather/FullInfo/FullInfo\"\r\nimport {Redirect, Route, Switch} from \"react-router-dom\"\r\n\r\nfunction App() {\r\n    const initialize = useSelector<AppStateType, boolean>(state => state.app.initialize)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(setInfo())\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        dispatch(initApp())\r\n    }, [initialize])\r\n\r\n    if (!initialize) {\r\n        return <div\r\n            style={{position: \"fixed\", top: \"30%\", textAlign: \"center\", width: \"100%\"}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <Container className=\"App\">\r\n            <Header/>\r\n            <Switch>\r\n                <Route exact path={\"/\"} render={() => <Weather/>}/>\r\n                <Route path={\"/fullInfo\"} render={() => <FullInfo/>}/>\r\n                <Route path={\"/404\"} render={() => <h1>404: page not found</h1>}/>\r\n                <Redirect from={\"*\"} to={\"/404\"}/>\r\n            </Switch>\r\n            <footer style={{backgroundColor: \"hsl(183, 53%, 81%)\", height: \"20px\"}}>\r\n\r\n            </footer>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\"\r\nimport thunk, {ThunkAction} from \"redux-thunk\"\r\nimport {appReducer} from \"./appReducer\"\r\nimport {weatherReducer} from \"./weatherReducer\"\r\nimport {fullInfoReducer} from \"./fullInfoReducer\"\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\nexport type ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, any>\r\n\r\nconst rootReducer = combineReducers({\r\n    app: appReducer,\r\n    weatherPage: weatherReducer,\r\n    fullPage: fullInfoReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n//@ts-ignore\r\nwindow.store = store.getState()","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport \"./index.css\"\r\nimport App from \"./App\"\r\nimport reportWebVitals from \"./reportWebVitals\"\r\nimport {HashRouter} from \"react-router-dom\"\r\nimport {Provider} from \"react-redux\"\r\nimport {store} from \"./Redux/store\"\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </HashRouter>,\r\n    document.getElementById(\"root\")\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}